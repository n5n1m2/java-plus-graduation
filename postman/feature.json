{
	"info": {
		"_postman_id": "150df5bb-7835-46f9-b73d-d3aa348e57b8",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "42553234"
	},
	"item": [
		{
			"name": "private",
			"item": [
				{
					"name": "Add comment test",
					"item": [
						{
							"name": "Add comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id)\r",
											"        comment = rnd.getComment();\r",
											"        pm.variables.set(\"requestBody\", JSON.stringify(comment));\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const requestBody = JSON.parse(pm.request.body.raw);\r",
											"const userId = pm.collectionVariables.get(\"uid\")\r",
											"const eventId = pm.collectionVariables.get(\"eventId\")\r",
											"\r",
											"\r",
											"pm.test(\"Комментарий должен содержать поля: id, text, event, author, createdOn \", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('event');\r",
											"pm.expect(target).to.have.property('author');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"});\r",
											"\r",
											"pm.test(\"Текст комментария должен быть идентичен тексту, который отправлен в запросе.\", function () {\r",
											"pm.expect(target.text).equal(requestBody.text);\r",
											"});\r",
											"\r",
											"pm.test(\"id пользователя в ответе должен совпадать с id в запросе\", function(){\r",
											"    pm.expect(target.author.id).equal(userId);\r",
											"})\r",
											"\r",
											"pm.test(\"id события в ответе должен совпадать с id в запросе\", function(){\r",
											"    pm.expect(target.event.id).equal(eventId);\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding a 5-character comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id)\r",
											"        comment = {\r",
											"            text: \"12345\"\r",
											"        };\r",
											"        pm.variables.set(\"requestBody\", JSON.stringify(comment));\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding an empty comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id)\r",
											"        comment = {\r",
											"            text: \"\"\r",
											"        };\r",
											"        pm.variables.set(\"requestBody\", JSON.stringify(comment));\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding a comment with spaces only",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id)\r",
											"        comment = {\r",
											"            text: \"                                                                                                        \"\r",
											"        };\r",
											"        pm.variables.set(\"requestBody\", JSON.stringify(comment));\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments"
									],
									"variable": [
										{
											"key": "userId",
											"value": ""
										},
										{
											"key": "eventId",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding a comment that exceeds the maximum length.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id)\r",
											"        const text = rnd.getWord(7001);\r",
											"        comment = {\r",
											"        text: text\r",
											"        };\r",
											"        pm.variables.set(\"requestBody\", JSON.stringify(comment));\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get comments",
					"item": [
						{
							"name": "Get list comments",
							"item": [
								{
									"name": "Get comments",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const user = await api.addUser(rnd.getUser());\r",
													"        pm.collectionVariables.set(\"uid\", user.id)\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
													"        pm.collectionVariables.set(\"eventId\", event.id);\r",
													"        await api.publishEvent(event.id);\r",
													"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
													"        const comment2 = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
													"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
													"        pm.collectionVariables.set(\"commentId2\", comment2.id);\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(200);   \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"var target = pm.response.json();\r",
													"var userId = pm.collectionVariables.get(\"uid\")\r",
													"var eventId = pm.collectionVariables.get(\"eventId\")\r",
													"\r",
													"pm.test(\"Комментарий должен содержать поля: id, text, event, author, createdOn, publishedOn,  state\", function () {\r",
													"pm.expect(target[0]).to.have.property('id');\r",
													"pm.expect(target[0]).to.have.property('text');\r",
													"pm.expect(target[0]).to.have.property('event');\r",
													"pm.expect(target[0]).to.have.property('author');\r",
													"pm.expect(target[0]).to.have.property('createdOn');\r",
													"});\r",
													"\r",
													"pm.test(\"id пользователя в ответе должен совпадать с id в запросе\", function(){\r",
													"    pm.expect(target[0].author.id).equal(userId);\r",
													"    pm.expect(target[1].author.id).equal(userId);\r",
													"})\r",
													"\r",
													"pm.test(\"id события в ответе должен совпадать с id в запросе\", function(){\r",
													"    pm.expect(target[0].event.id).equal(eventId);\r",
													"    pm.expect(target[1].event.id).equal(eventId);\r",
													"})\r",
													"\r",
													"pm.test(\"Ответ должен быть массивом из 2 комментариев\", function () {\r",
													"    pm.expect(target).to.be.an('array'); \r",
													"    pm.expect(target.length).to.eql(2);  \r",
													"});\r",
													"\r",
													"pm.test(\"В массив должны попасть все добавленные комментарии\", function() {\r",
													"    pm.expect(target[0].id).equals(pm.collectionVariables.get(\"commentId\"));\r",
													"    pm.expect(target[1].id).equals(pm.collectionVariables.get(\"commentId2\"));\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/comments?state=ALL",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"comments"
											],
											"query": [
												{
													"key": "state",
													"value": "ALL"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{uid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get only publishet comment for event",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const user = await api.addUser(rnd.getUser());\r",
													"        pm.collectionVariables.set(\"uid\", user.id)\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
													"        pm.collectionVariables.set(\"eventId\", event.id);\r",
													"        await api.publishEvent(event.id);\r",
													"        const event2 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
													"        pm.collectionVariables.set(\"eventId2\", event2.id);\r",
													"        await api.publishEvent(event2.id);\r",
													"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
													"        const comment2 = await api.addComment(user.id, event2.id, { text: rnd.getWord(500) });\r",
													"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
													"        await api.approveComment(comment.id);\r",
													"        await api.approveComment(comment2.id);\r",
													"        pm.collectionVariables.set(\"commentId2\", comment2.id);\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(200);   \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"var target = pm.response.json();\r",
													"var userId = pm.collectionVariables.get(\"uid\")\r",
													"var eventId = pm.collectionVariables.get(\"eventId\")\r",
													"\r",
													"pm.test(\"Комментарий должен содержать поля: id, text, event, author, createdOn, publishedOn,  state\", function () {\r",
													"pm.expect(target[0]).to.have.property('id');\r",
													"pm.expect(target[0]).to.have.property('text');\r",
													"pm.expect(target[0]).to.have.property('event');\r",
													"pm.expect(target[0]).to.have.property('author');\r",
													"pm.expect(target[0]).to.have.property('createdOn');\r",
													"});\r",
													"\r",
													"pm.test(\"id пользователя в ответе должен совпадать с id в запросе\", function(){\r",
													"    pm.expect(target[0].author.id).equal(userId);\r",
													"})\r",
													"\r",
													"pm.test(\"id события в ответе должен совпадать с id в запросе\", function(){\r",
													"    pm.expect(target[0].event.id).equal(eventId);\r",
													"})\r",
													"\r",
													"pm.test(\"Ответ должен быть массивом из 1 комментариz\", function () {\r",
													"    pm.expect(target).to.be.an('array'); \r",
													"    pm.expect(target.length).to.eql(1);  \r",
													"});\r",
													"\r",
													"pm.test(\"id комментария должен совпадать с ожидаемым id\", function() {\r",
													"    pm.expect(target[0].id).equals(pm.collectionVariables.get(\"commentId\"));\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"comments"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{uid}}"
												},
												{
													"key": "eventId",
													"value": "{{eventId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get only publishet comment for event  unknown user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const user = await api.addUser(rnd.getUser());\r",
													"        pm.collectionVariables.set(\"uid\", user.id)\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
													"        pm.collectionVariables.set(\"eventId\", event.id);\r",
													"        await api.publishEvent(event.id);\r",
													"        const event2 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
													"        pm.collectionVariables.set(\"eventId2\", event2.id);\r",
													"        await api.publishEvent(event2.id);\r",
													"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
													"        const comment2 = await api.addComment(user.id, event2.id, { text: rnd.getWord(500) });\r",
													"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
													"        await api.approveComment(comment.id);\r",
													"        await api.approveComment(comment2.id);\r",
													"        pm.collectionVariables.set(\"commentId2\", comment2.id);\r",
													"        pm.collectionVariables.set(\"uid\", user.id + 1)\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(404);   \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"comments"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{uid}}"
												},
												{
													"key": "eventId",
													"value": "{{eventId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get only publishet comment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const user = await api.addUser(rnd.getUser());\r",
													"        pm.collectionVariables.set(\"uid\", user.id)\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
													"        pm.collectionVariables.set(\"eventId\", event.id);\r",
													"        await api.publishEvent(event.id);\r",
													"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
													"        const comment2 = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
													"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
													"        await api.approveComment(comment.id);\r",
													"        pm.collectionVariables.set(\"commentId2\", comment2.id);\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(200);   \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"var target = pm.response.json();\r",
													"var userId = pm.collectionVariables.get(\"uid\")\r",
													"var eventId = pm.collectionVariables.get(\"eventId\")\r",
													"\r",
													"pm.test(\"Комментарий должен содержать поля: id, text, event, author, createdOn, publishedOn,  state\", function () {\r",
													"pm.expect(target[0]).to.have.property('id');\r",
													"pm.expect(target[0]).to.have.property('text');\r",
													"pm.expect(target[0]).to.have.property('event');\r",
													"pm.expect(target[0]).to.have.property('author');\r",
													"pm.expect(target[0]).to.have.property('createdOn');\r",
													"pm.expect(target[0]).to.have.property('publishedOn');\r",
													"pm.expect(target[0]).to.have.property('state');\r",
													"});\r",
													"\r",
													"pm.test(\"id пользователя в ответе должен совпадать с id в запросе\", function(){\r",
													"    pm.expect(target[0].author.id).equal(userId);\r",
													"})\r",
													"\r",
													"pm.test(\"id события в ответе должен совпадать с id в запросе\", function(){\r",
													"    pm.expect(target[0].event.id).equal(eventId);\r",
													"})\r",
													"\r",
													"pm.test(\"Ответ должен быть массивом из 1 комментариz\", function () {\r",
													"    pm.expect(target).to.be.an('array'); \r",
													"    pm.expect(target.length).to.eql(1);  \r",
													"});\r",
													"\r",
													"pm.test(\"В массив должty попасть только 1 комментарий\", function() {\r",
													"    pm.expect(target[0].id).equals(pm.collectionVariables.get(\"commentId\"));\r",
													"})\r",
													"\r",
													"pm.test(\"Поле publishedOn не должно быть null\", function(){\r",
													"    pm.expect(target[0]).to.have.property('publishedOn');\r",
													"    pm.expect(target[0].publishedOn).not.equals(undefined);\r",
													"    pm.expect(target[0].publishedOn).not.equals(null);\r",
													"})\r",
													"\r",
													"pm.test(\"Поле state должно быть PUBLISHED\", function() {\r",
													"    pm.expect(target[0].state).equal('PUBLISHED');\r",
													"})\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/comments?state=PUBLISHED",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"comments"
											],
											"query": [
												{
													"key": "state",
													"value": "PUBLISHED"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{uid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "from > size",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const user = await api.addUser(rnd.getUser());\r",
													"        pm.collectionVariables.set(\"uid\", user.id)\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
													"        pm.collectionVariables.set(\"eventId\", event.id);\r",
													"        await api.publishEvent(event.id);\r",
													"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
													"        const comment2 = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
													"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
													"        pm.collectionVariables.set(\"commentId2\", comment2.id);\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(200);   \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"var target = pm.response.json();\r",
													"\r",
													"pm.test(\"Ответ должен быть массивом из 0 комментариев\", function () {\r",
													"    pm.expect(target).to.be.an('array'); \r",
													"    pm.expect(target.length).to.eql(0);  \r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/comments?from=100&size=1&state=ALL",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"comments"
											],
											"query": [
												{
													"key": "from",
													"value": "100"
												},
												{
													"key": "size",
													"value": "1"
												},
												{
													"key": "state",
													"value": "ALL"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{uid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "from > size & size = 0",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const user = await api.addUser(rnd.getUser());\r",
													"        pm.collectionVariables.set(\"uid\", user.id)\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
													"        pm.collectionVariables.set(\"eventId\", event.id);\r",
													"        await api.publishEvent(event.id);\r",
													"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
													"        const comment2 = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
													"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
													"        pm.collectionVariables.set(\"commentId2\", comment2.id);\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(200);   \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"var target = pm.response.json();\r",
													"var userId = pm.collectionVariables.get(\"uid\")\r",
													"var eventId = pm.collectionVariables.get(\"eventId\")\r",
													"\r",
													"pm.test(\"Комментарий должен содержать поля: id, text, event, author, createdOn, publishedOn,  state\", function () {\r",
													"pm.expect(target[0]).to.have.property('id');\r",
													"pm.expect(target[0]).to.have.property('text');\r",
													"pm.expect(target[0]).to.have.property('event');\r",
													"pm.expect(target[0]).to.have.property('author');\r",
													"pm.expect(target[0]).to.have.property('createdOn');\r",
													"});\r",
													"\r",
													"pm.test(\"id пользователя в ответе должен совпадать с id в запросе\", function(){\r",
													"    pm.expect(target[0].author.id).equal(userId);\r",
													"})\r",
													"\r",
													"pm.test(\"id события в ответе должен совпадать с id в запросе\", function(){\r",
													"    pm.expect(target[0].event.id).equal(eventId);\r",
													"})\r",
													"\r",
													"pm.test(\"Ответ должен быть массивом из 1 комментария\", function () {\r",
													"    pm.expect(target).to.be.an('array'); \r",
													"    pm.expect(target.length).to.eql(1);  \r",
													"});\r",
													"\r",
													"pm.test(\"В массиве не должно быть первого комментария\", function() {\r",
													"    pm.expect(target[0].id).equals(pm.collectionVariables.get(\"commentId2\"));\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/comments?from=1&size=0&state=ALL",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"comments"
											],
											"query": [
												{
													"key": "from",
													"value": "1"
												},
												{
													"key": "size",
													"value": "0"
												},
												{
													"key": "state",
													"value": "ALL"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{uid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "size < 0",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const user = await api.addUser(rnd.getUser());\r",
													"        pm.collectionVariables.set(\"uid\", user.id)\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
													"        pm.collectionVariables.set(\"eventId\", event.id);\r",
													"        await api.publishEvent(event.id);\r",
													"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
													"        const comment2 = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
													"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
													"        pm.collectionVariables.set(\"commentId2\", comment2.id);\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(400);   \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/comments?size=-100&state=ALL",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"comments"
											],
											"query": [
												{
													"key": "size",
													"value": "-100"
												},
												{
													"key": "state",
													"value": "ALL"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{uid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Unknown user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const user = await api.addUser(rnd.getUser());\r",
													"        pm.collectionVariables.set(\"uid\", user.id)\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
													"        pm.collectionVariables.set(\"eventId\", event.id);\r",
													"        await api.publishEvent(event.id);\r",
													"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
													"        const comment2 = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
													"        pm.collectionVariables.set(\"uid\", user.id + 1)\r",
													"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
													"        pm.collectionVariables.set(\"commentId2\", comment2.id);\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(404);   \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/comments?state=ALL",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"comments"
											],
											"query": [
												{
													"key": "state",
													"value": "ALL"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{uid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get empy list",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const user = await api.addUser(rnd.getUser());\r",
													"        pm.collectionVariables.set(\"uid\", user.id)\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var target = pm.response.json();\r",
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(200);   \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ должен быть массивом из 0 комментариев\", function () {\r",
													"    pm.expect(target).to.be.an('array'); \r",
													"    pm.expect(target.length).to.eql(0);  \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/comments?state=ALL",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"comments"
											],
											"query": [
												{
													"key": "state",
													"value": "ALL"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{uid}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get a comment made by another user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id);\r",
											"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"        await api.approveComment(comment.id);\r",
											"        const anotherUser = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", anotherUser.id)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"var target = pm.response.json();\r",
											"var userId = pm.collectionVariables.get(\"uid\")\r",
											"var eventId = pm.collectionVariables.get(\"eventId\")\r",
											"\r",
											"pm.test(\"Комментарий должен содержать поля: id, text, event, author, createdOn \", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('event');\r",
											"pm.expect(target).to.have.property('author');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"});\r",
											"\r",
											"pm.test(\"В комментарии не должно быть полей publishedOn,  state\", function() {\r",
											"    pm.expect(target).not.have.property('publishedOn');\r",
											"    pm.expect(target).not.have.property('state');\r",
											"})\r",
											"\r",
											"pm.test(\"id пользователя в ответе должен отличаться от id в запросе\", function(){\r",
											"    pm.expect(target.author.id).not.equal(userId);\r",
											"})\r",
											"\r",
											"pm.test(\"id события в ответе должен совпадать с id в запросе\", function(){\r",
											"    pm.expect(target.event.id).equal(eventId);\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a comment made by another user but comment not published",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id);\r",
											"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"        const anotherUser = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", anotherUser.id)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(403);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get not added comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id);\r",
											"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id + 1);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete comments",
					"item": [
						{
							"name": "Delete comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id);\r",
											"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"        const comm = await api.findComment(user.id, event.id, comment.id)\r",
											"        pm.collectionVariables.set(\"comm\", comm)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get('comm');\r",
											"const commentId = pm.collectionVariables.get('commentId');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleting a comment made by another user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const anotherUser = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id);\r",
											"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"        const comm = await api.findComment(user.id, event.id, comment.id)\r",
											"        pm.collectionVariables.set(\"comm\", comm)\r",
											"        pm.collectionVariables.set(\"uid\", anotherUser.id)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(403);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleting an not added comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id);\r",
											"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id + 1);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit comment",
					"item": [
						{
							"name": "Edit comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id)\r",
											"        const oldComment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"comm\", oldComment)\r",
											"        pm.collectionVariables.set(\"commentId\", oldComment.id)\r",
											"        comment = rnd.getComment();\r",
											"        pm.variables.set(\"requestBody\", JSON.stringify(comment));\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const api = new API(pm);\r",
											"const source = pm.collectionVariables.get('comm');\r",
											"const commentId = pm.collectionVariables.get('commentId');\r",
											"const userId = pm.collectionVariables.get('uid');\r",
											"const eventId = pm.collectionVariables.get('eventId');\r",
											"const target = pm.response.json();\r",
											"const requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"pm.test(\"Комментарий должен быть найден до выполнения запроса\", function(){\r",
											"    pm.expect(source).to.be.an('object');\r",
											"    pm.expect(source.id).to.eql(commentId);\r",
											"});\r",
											"\r",
											"pm.test(\"Комментарий должен содержать поля: id, text, event, author, createdOn, publishedOn,  state\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('event');\r",
											"pm.expect(target).to.have.property('author');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"});\r",
											"\r",
											"pm.test(\"Текст комментария должен изменится после выполнения запроса\", function() {\r",
											"    pm.expect(source.text).not.equals(target.text);\r",
											"})\r",
											"\r",
											"pm.test(\"Текст комментария должен быть идентичен тексту, который отправлен в запросе.\", function () {\r",
											"pm.expect(target.text).equal(requestBody.text);\r",
											"});\r",
											"\r",
											"pm.test(\"Состояние комментария должно быть PENDING\", function () {\r",
											"pm.expect(target.state).equal(\"PENDING\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit published comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id)\r",
											"        const oldComment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"comm\", oldComment)\r",
											"        pm.collectionVariables.set(\"commentId\", oldComment.id)\r",
											"        comment = rnd.getComment();\r",
											"        pm.variables.set(\"requestBody\", JSON.stringify(comment));\r",
											"        await api.rejectComment(oldComment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit rejected comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id)\r",
											"        const oldComment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"comm\", oldComment)\r",
											"        pm.collectionVariables.set(\"commentId\", oldComment.id)\r",
											"        comment = rnd.getComment();\r",
											"        pm.variables.set(\"requestBody\", JSON.stringify(comment));\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const api = new API(pm);\r",
											"const source = pm.collectionVariables.get('comm');\r",
											"const commentId = pm.collectionVariables.get('commentId');\r",
											"const userId = pm.collectionVariables.get('uid');\r",
											"const eventId = pm.collectionVariables.get('eventId');\r",
											"const target = pm.response.json();\r",
											"const requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"pm.test(\"Комментарий должен быть найден до выполнения запроса\", function(){\r",
											"    pm.expect(source).to.be.an('object');\r",
											"    pm.expect(source.id).to.eql(commentId);\r",
											"});\r",
											"\r",
											"pm.test(\"Комментарий должен содержать поля: id, text, event, author, createdOn, publishedOn,  state\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('event');\r",
											"pm.expect(target).to.have.property('author');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"});\r",
											"\r",
											"pm.test(\"Текст комментария должен изменится после выполнения запроса\", function() {\r",
											"    pm.expect(source.text).not.equals(target.text);\r",
											"})\r",
											"\r",
											"pm.test(\"Текст комментария должен быть идентичен тексту, который отправлен в запросе.\", function () {\r",
											"pm.expect(target.text).equal(requestBody.text);\r",
											"});\r",
											"\r",
											"pm.test(\"Состояние комментария должно быть PENDING\", function () {\r",
											"pm.expect(target.state).equal(\"PENDING\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Comment wiht only spaces",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id)\r",
											"        const oldComment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"comm\", oldComment)\r",
											"        pm.collectionVariables.set(\"commentId\", oldComment.id)\r",
											"        comment = {\r",
											"            text: \"                       \"\r",
											"        }\r",
											"        pm.variables.set(\"requestBody\", JSON.stringify(comment));\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id)\r",
											"        const oldComment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"commentId\", oldComment.id)\r",
											"        comment = {\r",
											"            text: \"\"\r",
											"        }\r",
											"        pm.variables.set(\"requestBody\", JSON.stringify(comment));\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "edit comment by another user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id)\r",
											"        const oldComment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"comm\", oldComment)\r",
											"        const anotherUser = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"commentId\", oldComment.id)\r",
											"        pm.collectionVariables.set(\"uid\", anotherUser.id)\r",
											"        comment = rnd.getComment();\r",
											"        pm.variables.set(\"requestBody\", JSON.stringify(comment));\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(403);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5-character comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id)\r",
											"        const oldComment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"commentId\", oldComment.id)\r",
											"        comment = {\r",
											"            text: \"12345\"\r",
											"        }\r",
											"        pm.variables.set(\"requestBody\", JSON.stringify(comment));\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "7001-character comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id)\r",
											"        const oldComment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"commentId\", oldComment.id)\r",
											"        const text = rnd.getWord(7001);\r",
											"        comment = {\r",
											"            text: text\r",
											"        }\r",
											"        pm.variables.set(\"requestBody\", JSON.stringify(comment));\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "No found comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id)\r",
											"        const oldComment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"commentId\", oldComment.id + 1)\r",
											"        const text = rnd.getWord(20);\r",
											"        comment = {\r",
											"            text: text\r",
											"        }\r",
											"        pm.variables.set(\"requestBody\", JSON.stringify(comment));\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "admin",
			"item": [
				{
					"name": "get comments",
					"item": [
						{
							"name": "get all comments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id);\r",
											"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Массив не должен быть пустым\", function () {\r",
											"    pm.expect(target).to.be.an('array'); \r",
											"    pm.expect(target.length).to.above(0);  \r",
											"});\r",
											"\r",
											"pm.test(\"Комментарий должен содержать поля: id, text, event, author, createdOn, publishedOn,  state\", function () {\r",
											"pm.expect(target[0]).to.have.property('id');\r",
											"pm.expect(target[0]).to.have.property('text');\r",
											"pm.expect(target[0]).to.have.property('event');\r",
											"pm.expect(target[0]).to.have.property('author');\r",
											"pm.expect(target[0]).to.have.property('createdOn');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments?state=ALL&rangeStart=1990-01-01 00:00:00&rangeEnd=2050-01-01 00:00:00",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "state",
											"value": "ALL"
										},
										{
											"key": "rangeStart",
											"value": "1990-01-01 00:00:00"
										},
										{
											"key": "rangeEnd",
											"value": "2050-01-01 00:00:00"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "start highest end",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments?state=ALL&rangeStart=2999-01-01 00:00:00&rangeEnd=2050-01-01 00:00:00",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "state",
											"value": "ALL"
										},
										{
											"key": "rangeStart",
											"value": "2999-01-01 00:00:00"
										},
										{
											"key": "rangeEnd",
											"value": "2050-01-01 00:00:00"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "No state",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments?rangeStart=1999-01-01 00:00:00&rangeEnd=2050-01-01 00:00:00",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "rangeStart",
											"value": "1999-01-01 00:00:00"
										},
										{
											"key": "rangeEnd",
											"value": "2050-01-01 00:00:00"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "incorrect state",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments?state=INCORRECT&rangeStart=1999-01-01 00:00:00&rangeEnd=2050-01-01 00:00:00",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "state",
											"value": "INCORRECT"
										},
										{
											"key": "rangeStart",
											"value": "1999-01-01 00:00:00"
										},
										{
											"key": "rangeEnd",
											"value": "2050-01-01 00:00:00"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test rangeStart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id);\r",
											"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Массив  должен быть пустым\", function () {\r",
											"    pm.expect(target).to.be.an('array'); \r",
											"    pm.expect(target.length).to.equals(0);  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments?rangeStart=2040-01-01 00:00:00&rangeEnd=2050-01-01 00:00:00",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "rangeStart",
											"value": "2040-01-01 00:00:00"
										},
										{
											"key": "rangeEnd",
											"value": "2050-01-01 00:00:00"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test rangeEnd",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id);\r",
											"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Массив  должен быть пустым\", function () {\r",
											"    pm.expect(target).to.be.an('array'); \r",
											"    pm.expect(target.length).to.equals(0);  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments?rangeStart=1991-01-01 00:00:00&rangeEnd=1992-01-01 00:00:00",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "rangeStart",
											"value": "1991-01-01 00:00:00"
										},
										{
											"key": "rangeEnd",
											"value": "1992-01-01 00:00:00"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "edit comment status",
					"item": [
						{
							"name": "no action",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id);\r",
											"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/::commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"::commentId"
									],
									"variable": [
										{
											"key": ":commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "incorrect action",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id);\r",
											"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId?action=incorrect",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"query": [
										{
											"key": "action",
											"value": "incorrect"
										}
									],
									"variable": [
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Approve comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id);\r",
											"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"var target = pm.response.json();\r",
											"var userId = pm.collectionVariables.get(\"uid\")\r",
											"var eventId = pm.collectionVariables.get(\"commentId\")\r",
											"\r",
											"pm.test(\"Комментарий должен содержать поля: id, text, event, author, createdOn, publishedOn,  state\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('event');\r",
											"pm.expect(target).to.have.property('author');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('publishedOn');\r",
											"pm.expect(target).to.have.property('state');\r",
											"});\r",
											"\r",
											"pm.test(\"id пользователя в ответе должен совпадать с id в запросе\", function(){\r",
											"    pm.expect(target.author.id).equal(userId);\r",
											"})\r",
											"\r",
											"pm.test(\"id комментария в ответе должен совпадать с id в запросе\", function(){\r",
											"    pm.expect(target.id).equal(eventId);\r",
											"})\r",
											"\r",
											"pm.test(\"Поле publishedOn не должно быть null\", function(){\r",
											"    pm.expect(target).to.have.property('publishedOn');\r",
											"    pm.expect(target.publishedOn).not.equals(undefined);\r",
											"    pm.expect(target.publishedOn).not.equals(null);\r",
											"})\r",
											"\r",
											"pm.test(\"Поле state должно быть PUBLISHED\", function() {\r",
											"    pm.expect(target.state).equal('PUBLISHED');\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId?action=APPROVE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"query": [
										{
											"key": "action",
											"value": "APPROVE"
										}
									],
									"variable": [
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Approve no pending comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id);\r",
											"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"        await api.approveComment(comment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId?action=APPROVE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"query": [
										{
											"key": "action",
											"value": "APPROVE"
										}
									],
									"variable": [
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Approve rejected comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id);\r",
											"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"        await api.approveComment(comment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId?action=APPROVE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"query": [
										{
											"key": "action",
											"value": "APPROVE"
										}
									],
									"variable": [
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reject comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id);\r",
											"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"var target = pm.response.json();\r",
											"var userId = pm.collectionVariables.get(\"uid\")\r",
											"var eventId = pm.collectionVariables.get(\"commentId\")\r",
											"\r",
											"pm.test(\"Комментарий должен содержать поля: id, text, event, author, createdOn, publishedOn,  state\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('event');\r",
											"pm.expect(target).to.have.property('author');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"});\r",
											"\r",
											"pm.test(\"id пользователя в ответе должен совпадать с id в запросе\", function(){\r",
											"    pm.expect(target.author.id).equal(userId);\r",
											"})\r",
											"\r",
											"pm.test(\"id комментария в ответе должен совпадать с id в запросе\", function(){\r",
											"    pm.expect(target.id).equal(eventId);\r",
											"})\r",
											"\r",
											"pm.test(\"Поле state должно быть CANCELED\", function() {\r",
											"    pm.expect(target.state).equal('CANCELED');\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId?action=REJECT",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"query": [
										{
											"key": "action",
											"value": "REJECT"
										}
									],
									"variable": [
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Dekete comments",
					"item": [
						{
							"name": "Delete comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id);\r",
											"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"        const comm = await api.findComment(user.id, event.id, comment.id)\r",
											"        pm.collectionVariables.set(\"comm\", comm)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get('comm');\r",
											"const commentId = pm.collectionVariables.get('commentId');\r",
											"\r",
											"pm.test(\"Комментарий должен быть найден до выполнения запроса\", function(){\r",
											"    pm.expect(source).to.be.an('object');\r",
											"    pm.expect(source.id).to.eql(commentId);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete not added comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.publishEvent(event.id);\r",
											"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id + 1);\r",
											"        const comm = await api.findComment(user.id, event.id, comment.id)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "public",
			"item": [
				{
					"name": "get all published comments",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eventId\", event.id);\r",
									"        await api.publishEvent(event.id);\r",
									"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
									"        const comment2 = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
									"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
									"        await api.approveComment(comment.id);\r",
									"        pm.collectionVariables.set(\"commentId2\", comment2.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"var target = pm.response.json();\r",
									"var userId = pm.collectionVariables.get(\"uid\")\r",
									"var eventId = pm.collectionVariables.get(\"eventId\")\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, event, author, createdOn, publishedOn,  state\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('text');\r",
									"pm.expect(target[0]).to.have.property('event');\r",
									"pm.expect(target[0]).to.have.property('author');\r",
									"pm.expect(target[0]).to.have.property('createdOn');\r",
									"});\r",
									"\r",
									"pm.test(\"id пользователя в ответе должен совпадать с id в запросе\", function(){\r",
									"    pm.expect(target[0].author.id).equal(userId);\r",
									"})\r",
									"\r",
									"pm.test(\"id события в ответе должен совпадать с id в запросе\", function(){\r",
									"    pm.expect(target[0].event.id).equal(eventId);\r",
									"})\r",
									"\r",
									"pm.test(\"Ответ должен быть массивом из 1 комментариz\", function () {\r",
									"    pm.expect(target).to.be.an('array'); \r",
									"    pm.expect(target.length).to.eql(1);  \r",
									"});\r",
									"\r",
									"pm.test(\"В массив должty попасть только 1 комментарий\", function() {\r",
									"    pm.expect(target[0].id).equals(pm.collectionVariables.get(\"commentId\"));\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "from < 0",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eventId\", event.id);\r",
									"        await api.publishEvent(event.id);\r",
									"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
									"        const comment2 = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
									"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
									"        await api.approveComment(comment.id);\r",
									"        pm.collectionVariables.set(\"commentId2\", comment2.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events/:eventId/comments?from=-15",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								":eventId",
								"comments"
							],
							"query": [
								{
									"key": "from",
									"value": "-15"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "size < 0",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eventId\", event.id);\r",
									"        await api.publishEvent(event.id);\r",
									"        const comment = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
									"        const comment2 = await api.addComment(user.id, event.id, { text: rnd.getWord(500) });\r",
									"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
									"        await api.approveComment(comment.id);\r",
									"        pm.collectionVariables.set(\"commentId2\", comment2.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events/:eventId/comments?size=-15",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								":eventId",
								"comments"
							],
							"query": [
								{
									"key": "size",
									"value": "-15"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    async addUser(user, verbose=null) {\r",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCategory(category, verbose=null) {\r",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addEvent(userId, event, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addComment (userId, eventId, commentData = {}) {\r",
					"        return this.post('/users/' + userId + '/events/' + eventId + '/comments',\r",
					"        commentData,\r",
					"        { 'Content-Type': 'application/json' })\r",
					"    }\r",
					"\r",
					"    async approveComment (commentId) {\r",
					"        return this.patch('/admin/comments/' + commentId +'?action=APPROVE');\r",
					"    }\r",
					"\r",
					"    async rejectComment (commentId) {\r",
					"        return this.patch('/admin/comments/' + commentId +'?action=REJECT');\r",
					"    }\r",
					"    \r",
					"    async addCompilation(compilation, verbose=null) {\r",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);\r",
					"    }\r",
					"\r",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {\r",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);\r",
					"    }\r",
					"\r",
					"    async publishEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);\r",
					"    }\r",
					"    \r",
					"    async rejectEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);\r",
					"    }\r",
					"\r",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {\r",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCategory(catId, verbose=null) {\r",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCompilation(compId, verbose=null) {\r",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findEvent(eventId, verbose=null) {\r",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findUser(userId, verbose=null) {\r",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findComment(userId, eventId, commentId) {\r",
					"        return this.get('/users/' + userId + '/events/' + eventId + '/comments/' + commentId);\r",
					"    }\r",
					"\r",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
					"    }\r",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                body: body == null ? \"\" : JSON.stringify(body),\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"            };\r",
					"            if(verbose) {\r",
					"                console.log(\"Отправляю запрос: \", request);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"                    if(verbose) {\r",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
					"                    }\r",
					"                    if (response.stream.length === 0){\r",
					"                        reject(new Error('Отправлено пустое тело ответа'))\r",
					"                    }else{\r",
					"                        resolve(response.json());\r",
					"                    }\r",
					"                });\r",
					"                \r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"};\r",
					"\r",
					"RandomUtils = class {\r",
					"    constructor() {}\r",
					"\r",
					"    getUser() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getCategory() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getEvent(categoryId) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getFutureDateTime(),\r",
					"            location: {\r",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
					"            },\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"    getComment(){\r",
					"        return {\r",
					"            text: pm.variables.replaceIn(\"{{$randomLoremParagraphs}}\"),\r",
					"        }\r",
					"    }\r",
					"\r",
					"    getCompilation(...eventIds) {\r",
					"        return {\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),\r",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            events: eventIds\r",
					"        };\r",
					"    }\r",
					"\r",
					"\r",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
					"        let moment = require('moment');\r",
					"\r",
					"        let m = moment();\r",
					"        m.add(hourShift, 'hour');\r",
					"        m.add(minuteShift, 'minute');\r",
					"        m.add(yearShift, 'year');\r",
					"\r",
					"        return m.format('YYYY-MM-DD HH:mm:ss');\r",
					"    }\r",
					"\r",
					"    getWord(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "uid",
			"value": ""
		},
		{
			"key": "eventId",
			"value": ""
		},
		{
			"key": "commentId",
			"value": ""
		},
		{
			"key": "comm",
			"value": ""
		},
		{
			"key": "commentId2",
			"value": ""
		},
		{
			"key": "body",
			"value": ""
		},
		{
			"key": "eventId2",
			"value": ""
		}
	]
}